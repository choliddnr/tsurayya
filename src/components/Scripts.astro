---

---

<script>
  // Chatbox functionality
  const chatbox = document.getElementById('chatbox');
  const chatToggle = document.getElementById('chat-toggle');
  const closeChat = document.getElementById('close-chat');
  const chatInput = document.getElementById('chat-input');
  const sendMessage = document.getElementById('send-message');
  const chatMessages = document.getElementById('chat-messages');

  let isChatOpen = false;

  chatToggle!.addEventListener('click', () => {
    isChatOpen = !isChatOpen;
    if (isChatOpen) {
      chatbox!.classList.remove('hidden');
      chatToggle!.classList.add('hidden'); // Hide toggle button
      setTimeout(() => {
        chatbox!.classList.remove('translate-y-4', 'opacity-0');
      }, 10);
    } else {
      chatbox!.classList.add('translate-y-4', 'opacity-0');
      setTimeout(() => {
        chatbox!.classList.add('hidden');
        chatToggle!.classList.remove('hidden'); // Show toggle button
      }, 300);
    }
  });

  closeChat!.addEventListener('click', () => {
    chatbox!.classList.add('translate-y-4', 'opacity-0');
    setTimeout(() => {
      chatbox!.classList.add('hidden');
      chatToggle!.classList.remove('hidden'); // Show toggle button when chatbox is closed
    }, 300);
    isChatOpen = false;
  });

  function addMessage(text: string, isUser = false) {
    const messageDiv = document.createElement('div');
    messageDiv.className = `chat-message mb-4 flex ${isUser ? 'justify-end' : 'justify-start'}`;

    const contentDiv = document.createElement('div');
    contentDiv.className = isUser
      ? 'bg-accent text-dark rounded-lg p-3 max-w-xs'
      : 'bg-primary/10 text-white rounded-lg p-3 max-w-xs';

    const messageText = document.createElement('p');
    messageText.textContent = text;

    const senderText = document.createElement('p');
    senderText.className = 'text-xs text-white/50 mt-1';
    senderText.textContent = isUser ? 'You' : 'AI Assistant';

    contentDiv.appendChild(messageText);
    contentDiv.appendChild(senderText);
    messageDiv.appendChild(contentDiv);
    chatMessages!.appendChild(messageDiv);

    chatMessages!.scrollTop = chatMessages!.scrollHeight;
  }

  sendMessage!.addEventListener('click', () => {
    const message = chatInput.value.trim();
    if (message) {
      addMessage(message, true);
      chatInput.value = '';

      // Simulate AI response after a delay
      setTimeout(() => {
        addMessage(
          'Thanks for your message! Our team will get back to you soon.'
        );
      }, 1000);
    }
  });

  chatInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
      sendMessage!.click();
    }
  });

  // Mobile menu toggle
  document
    .getElementById('mobile-menu-button')
    .addEventListener('click', function () {
      const menu = document.getElementById('mobile-menu');
      menu.classList.toggle('hidden');
    });

  // Mobile dropdown toggle
  document.querySelectorAll('#mobile-menu button').forEach((button) => {
    button.addEventListener('click', function () {
      const dropdown = this.nextElementSibling;
      const icon = this.querySelector('i');

      dropdown.classList.toggle('hidden');
      icon.classList.toggle('fa-chevron-down');
      icon.classList.toggle('fa-chevron-up');
    });
  });

  // Smooth scrolling for anchor links
  document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
    anchor.addEventListener('click', function (e) {
      e.preventDefault();

      const targetId = this.getAttribute('href');
      const targetElement = document.querySelector(targetId);

      if (targetElement) {
        window.scrollTo({
          top: targetElement.offsetTop - 80,
          behavior: 'smooth',
        });

        // Close mobile menu if open
        const mobileMenu = document.getElementById('mobile-menu');
        if (!mobileMenu.classList.contains('hidden')) {
          mobileMenu.classList.add('hidden');
        }
      }
    });
  });

  // Add scroll animation class when elements come into view
  const observerOptions = {
    threshold: 0.1,
  };

  const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        entry.target.classList.add('animate-fade-in');
      }
    });
  }, observerOptions);

  document.querySelectorAll('.service-card, .project-card').forEach((card) => {
    observer.observe(card);
  });
</script>
